<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="shader_background_vs">
        uniform vec2 uOffset;
        attribute vec2 aPosition;
        attribute vec3 aColor;
        varying vec3 vColor;
        varying vec2 vPosition;
        void main() {
            gl_Position = vec4(aPosition, 0.0, 1.0);
            vColor = aColor;
            vPosition = (aPosition + uOffset) * 8.0;
        }
    </string>
    <string name="shader_background_fs">
        precision mediump float;
        varying vec3 vColor;
        varying vec2 vPosition;
        void main() {
            gl_FragColor = vec4(vColor, 1.0);
            vec2 f = fract(vPosition);
            if (f.x &lt; 0.1 || f.y &lt; 0.1) {
                gl_FragColor.rgb *= 0.98;
            }
        }
    </string>
    <string name="shader_copy_vs">
        attribute vec2 aPosition;
        varying vec2 vTextureCoord;
        void main() {
            gl_Position = vec4(aPosition, 0.0, 1.0);
            vTextureCoord = (gl_Position.xy + 1.0) * 0.5;
        }
    </string>
    <string name="shader_copy_fs">
        precision mediump float;
        uniform sampler2D sTexture;
        uniform float uBrightness;
        varying vec2 vTextureCoord;
        void main() {
            gl_FragColor = texture2D(sTexture, vTextureCoord);
            float brightness = length(vTextureCoord - 0.5) * 1.3;
            gl_FragColor.rgb *= uBrightness - brightness * brightness;
        }
    </string>
    <string name="shader_spline_vs">
        uniform vec2 uControl0;
        uniform vec2 uControl1;
        uniform vec2 uControl2;
        uniform vec2 uControl3;
        uniform vec2 uWidth;
        uniform vec2 uBounds;
        attribute vec4 aSplinePosition;
        varying vec2 vLineCoord;
        void main() {
            float t1 = aSplinePosition.y;
            float t2 = aSplinePosition.z;
            float t3 = aSplinePosition.w;
            float tBounded = clamp(t1, uBounds.x, uBounds.y);
            if (t1 != tBounded) {
                t1 = tBounded;
                t2 = t1 * t1;
                t3 = t1 * t2;
            }
            
            vec2 pos = uControl0;
            pos += uControl1 * t1;
            pos += uControl2 * t2;
            pos += uControl3 * t3;
            pos *= 0.5;
            
            vec2 normalVec = uControl1;
            normalVec += 2.0 * uControl2 * t1;
            normalVec += 3.0 * uControl3 * t2;
            normalVec = normalize(vec2(-normalVec.y, normalVec.x));
            
            float width = uWidth.x + t1 * (uWidth.y - uWidth.x);
            pos += aSplinePosition.x * normalVec * width * 0.5;
            
            gl_Position = vec4(pos, 0.0, 1.0);
            vLineCoord = aSplinePosition.yx;
        }
    </string>
    <string name="shader_spline_fs">
        precision mediump float;
        uniform vec3 uColor;
        varying vec2 vLineCoord;
        void main() {
            gl_FragColor = vec4(uColor, 1.0);
        }
    </string>
</resources>